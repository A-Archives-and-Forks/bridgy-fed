# Main build and test pipeline.
#
# CircleCI automatically reads this file from our repo and uses it for
# configuration.
# https://circleci.com/docs/reference/configuration-reference/
version: 2.1

parameters:
  service:
    type: enum
    enum: ["hub", "default"]
    default: "default"

jobs:
  build:
    docker:
      - image: cimg/python:3.12

    steps:
      - checkout

      - restore_cache:
          key: venv-7-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: Base dependencies
          command: |
            # google-cloud-sdk: https://cloud.google.com/sdk/docs/install#deb
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update
            sudo apt-get install -y apt-transport-https automake ca-certificates gnupg google-cloud-sdk libtool pkg-config

      - run:
          name: Base dependencies for tests
          command: |
            sudo apt-get install -y google-cloud-cli-firestore-emulator openjdk-21-jre-headless

      - run:
          name: Python dependencies
          command: |
            pip install -U pip flake8
            pip -V
            # make sure we install these at head, below
            pip uninstall -y arroba brevity dag-json granary lexrpc oauth-dropins
            pip install -U -r requirements.txt
            pip install coverage coveralls
            ln -sf `pyenv prefix`/lib/python3.12/site-packages/oauth_dropins/fonts oauth_dropins_fonts
            ln -sf `pyenv prefix`/lib/python3.12/site-packages/oauth_dropins/static oauth_dropins_static

      - run:
          name: Build and test
          command: |
            CLOUDSDK_CORE_PROJECT=brid-gy gcloud emulators firestore start --host-port=:8089 --database-mode=datastore-mode < /dev/null >& /tmp/firestore-emulator.log &
            sleep 5s
            python -m coverage run --source=. --omit=appengine_config.py,logs.py,tests/\* -m unittest discover
            python -m coverage html -d /tmp/coverage_html
            if [ "$COVERALLS_REPO_TOKEN" != "" ]; then coveralls || true; fi

            # check for unintentionally overridden test methods
            # https://flake8.pycqa.org/en/latest/user/error-codes.html#error-codes
            # https://flake8.pycqa.org/en/latest/user/options.html#cmdoption-flake8-select
            flake8 --select=F811 tests/test_*.py

      - run:
          name: oauth-dropins, for static assets
          command: |
            git clone --depth=1 https://github.com/snarfed/oauth-dropins.git ../oauth-dropins

      - run:
          name: Deploy
          command: |
            echo $CIRCLE_BRANCH $CIRCLE_USERNAME
            # don't deploy on dependabot merges. $CIRCLE_USERNAME is unset for
            # GitHub users who don't have Circle accounts, like dependabot.
            if [[ $CIRCLE_BRANCH == "main" && $CIRCLE_USERNAME != "" ]]; then
              echo $FLASK_SECRET_KEY > flask_secret_key
              echo $REPO_TOKEN > repo_token
              echo $THREADS_APP_ID > threads_app_id
              echo $THREADS_APP_SECRET > threads_app_secret
              echo $GCLOUD_SERVICE_KEY > /tmp/service_account_creds.json
              echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=/tmp/service_account_creds.json

              service='<< pipeline.parameters.service >>'
              gcloud config set project bridgy-federated

              if [[ $service == 'default' ]]; then
                cd /tmp
                curl https://storage.googleapis.com/oauth2l/latest/linux_amd64.tgz | tar xz
                cd -

                # deploy router with min_num_instances equal to the current
                # autoscaled number, then afterward drop it back down to 1
                # https://github.com/snarfed/bridgy-fed/issues/1771
                ver=`gcloud app versions list --hide-no-traffic --service=router --format='value(id)'`
                instances=`gcloud app instances list --service=router --version=${ver} --format='value(id)' |wc -l`
                sed -E "s/min_num_instances: [0-9]+/min_num_instances: ${instances}/" < router.yaml > router.provisioned.yaml
                gcloud -q app deploy index.yaml queue.yaml router.provisioned.yaml

                ver=`gcloud app versions list --hide-no-traffic --service=router --format='value(id)'`
                /tmp/linux_amd64/oauth2l curl --scope=cloud-platform --credentials=/tmp/service_account_creds.json --url "https://appengine.googleapis.com/v1/apps/bridgy-federated/services/router/versions/${ver}?updateMask=automaticScaling.minTotalInstances" -- -X PATCH --data '{"automaticScaling": {"minTotalInstances": 1}, "env": "flexible"}' -H 'Content-Type: application/json'

                gcloud -q app deploy --no-cache app.yaml

              else
                gcloud -q app deploy hub.yaml
              fi
            fi

      - save_cache:
          key: venv-7-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - /home/circleci/.pyenv
            # Ideally we'd cache these, but they need root, and the cimg/python
            # Docker image's default user is circleci :/
            # https://github.com/cypress-io/circleci-orb/issues/269
            #
            # - /usr/lib/google-cloud-sdk
            # - /usr/lib/jvm/java-11-openjdk-amd64

      - store_artifacts:
          path: /tmp/coverage_html
